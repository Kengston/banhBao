import os
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from datetime import datetime
import pytz
import asyncio

BOT_TOKEN = os.getenv("BOT_TOKEN")  # –∑–∞–¥–∞–¥–∏—Ç–µ –≤ Render
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "change-me")  # –ª—é–±–æ–π —Å–µ–∫—Ä–µ—Ç
BASE_URL = os.getenv("RENDER_EXTERNAL_URL")  # Render –∑–∞–¥–∞—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ö–æ–º–∞–Ω–¥–∞ /time ‚Äî —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –≤ –î–∞–Ω–∞–Ω–≥–µ
@dp.message_handler(commands=["time"])
async def send_time(message: types.Message):
    tz = pytz.timezone("Asia/Ho_Chi_Minh")
    now = datetime.now(tz)
    # –ü—Ä–∏–º–µ—Ä: 14:03:27, 19 Oct 2025 (GMT+7)
    offset_hours = int(now.utcoffset().total_seconds() // 3600)
    formatted = now.strftime("%H:%M:%S, %d %b %Y")
    await message.reply(f"üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –î–∞–Ω–∞–Ω–≥–µ: {formatted} (GMT{offset_hours:+d})")

app = FastAPI()

@app.on_event("startup")
async def on_startup():
    # –ü—É—Ç—å –≤–µ–±—Ö—É–∫–∞ —Å —Å–µ–∫—Ä–µ—Ç–æ–º
    webhook_path = f"/webhook/{WEBHOOK_SECRET}"
    if not BASE_URL:
        # –ù–∞ –ø–µ—Ä–≤–æ–º —Å—Ç–∞—Ä—Ç–µ Render –º–æ–∂–µ—Ç –Ω–µ –ø—Ä–æ–∫–∏–Ω—É—Ç—å env, –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é
        # –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–µ–ø–ª–æ–∏—Ç—å; –Ω–æ –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –±–µ–∑ BASE_URL –Ω–µ —Å—Ç–∞–≤–∏—Ç—å —Ö—É–∫.
        print("WARNING: RENDER_EXTERNAL_URL is empty; webhook won't be set automatically.")
        return
    url = BASE_URL.rstrip("/") + webhook_path
    await bot.set_webhook(url)
    print(f"Webhook set to {url}")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()

@app.get("/")
async def health():
    return {"ok": True}

@app.post(f"/webhook/{{secret}}")
async def telegram_update(secret: str, request: Request):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —á—É–∂–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    if secret != WEBHOOK_SECRET:
        return {"status": "forbidden"}
    data = await request.json()
    update = types.Update(**data)
    await dp.process_update(update)
    return {"ok": True}