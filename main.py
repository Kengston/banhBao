import os
import json
import aiofiles
from fastapi import FastAPI, Request, HTTPException
from aiogram import Bot, Dispatcher, types
from datetime import datetime, timedelta
import pytz
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from typing import Dict
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from urllib.parse import urlparse

# –ï–¥–∏–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚Äî —Å—Ç—Ä–æ–≥–æ –î–∞–Ω–∞–Ω–≥
DANANG_TZ = pytz.timezone("Asia/Ho_Chi_Minh")

BOT_TOKEN = os.getenv("BOT_TOKEN")  # –∑–∞–¥–∞–¥–∏—Ç–µ –≤ Render
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "change-me")  # –ª—é–±–æ–π —Å–µ–∫—Ä–µ—Ç
BASE_URL = os.getenv("RENDER_EXTERNAL_URL")  # Render –∑–∞–¥–∞—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—Å—Ç—Ä–æ–≥–æ –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –î–∞–Ω–∞–Ω–≥–∞)
scheduler = AsyncIOScheduler(timezone=pytz.timezone("Asia/Ho_Chi_Minh"))

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
EVENTS_FILE = "events.json"

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–±—ã—Ç–∏—è
class Event:
    def __init__(self, id: str, title: str, datetime_str: str, chat_id: int, link: str = ""):
        self.id = id
        self.title = title
        self.datetime_str = datetime_str
        self.chat_id = chat_id
        self.link = link
        self.datetime = datetime.fromisoformat(datetime_str)
    
    def to_dict(self):
        return {
            "id": self.id,
            "title": self.title,
            "datetime_str": self.datetime_str,
            "chat_id": self.chat_id,
            "link": self.link
        }
    
    @classmethod
    def from_dict(cls, data: dict):
        return cls(
            id=data["id"],
            title=data["title"],
            datetime_str=data["datetime_str"],
            chat_id=data.get("chat_id", data.get("user_id")),
            link=data.get("link", data.get("description", ""))
        )

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
async def load_events() -> Dict[str, Event]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        async with aiofiles.open(EVENTS_FILE, 'r', encoding='utf-8') as f:
            data = json.loads(await f.read())
            return {event_id: Event.from_dict(event_data) for event_id, event_data in data.items()}
    except FileNotFoundError:
        return {}
    except Exception as e:
        print(f"Error loading events: {e}")
        return {}

async def save_events(events: Dict[str, Event]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–∞–π–ª"""
    try:
        data = {event_id: event.to_dict() for event_id, event in events.items()}
        async with aiofiles.open(EVENTS_FILE, 'w', encoding='utf-8') as f:
            await f.write(json.dumps(data, ensure_ascii=False, indent=2))
    except Exception as e:
        print(f"Error saving events: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–±—ã—Ç–∏–π
events: Dict[str, Event] = {}

async def send_reminder(event: Event):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏"""
    try:
        reminder_text = (
            f"‚è∞ **Reminder!**\n\n"
            f"**Event:** {event.title}\n"
            f"**Time:** {event.datetime.astimezone(DANANG_TZ).strftime('%H:%M, %d %b %Y')}\n"
            f"**In:** 10 minutes\n"
        )
        if event.link:
            reminder_text += f"\nüîó [Join meeting]({event.link})\n"
        
        await bot.send_message(event.chat_id, reminder_text, parse_mode="Markdown", disable_web_page_preview=True)
        print(f"Reminder sent for event: {event.title}")
    except Exception as e:
        print(f"Error sending reminder: {e}")

async def schedule_reminder(event: Event):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ —Å–æ–±—ã—Ç–∏—è"""
    reminder_time = event.datetime - timedelta(minutes=10)
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –≤ –±—É–¥—É—â–µ–º
    if reminder_time > datetime.now(DANANG_TZ):
        scheduler.add_job(
            send_reminder,
            trigger=DateTrigger(run_date=reminder_time),
            args=[event],
            id=f"reminder_{event.id}",
            replace_existing=True
        )
        print(f"Scheduled reminder for event {event.title} at {reminder_time}")

# –ö–æ–º–∞–Ω–¥–∞ /time ‚Äî —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –≤ –î–∞–Ω–∞–Ω–≥–µ
@dp.message_handler(commands=["time"])
async def send_time(message: types.Message):
    tz = pytz.timezone("Asia/Ho_Chi_Minh")
    now = datetime.now(tz)
    # –ü—Ä–∏–º–µ—Ä: 14:03:27, 19 Oct 2025 (GMT+7)
    offset_hours = int(now.utcoffset().total_seconds() // 3600)
    formatted = now.strftime("%H:%M:%S, %d %b %Y")
    # –î–µ–ª–∞–µ–º –≤—Ä–µ–º—è –∂–∏—Ä–Ω—ã–º –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
    await message.reply(f"üïí Current time in Danang: *{formatted}* (GMT{offset_hours:+d})", parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /links ‚Äî —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–∞–±–æ—á–∏–µ –¥–æ—Å–∫–∏
@dp.message_handler(commands=["links"])
async def send_links(message: types.Message):
    links_text = (
        "üîó **Useful Links:**\n\n"
        "üìã **Miro Board:**\n"
        "[Open Miro](https://miro.com/app/board/uXjVJ7CoXxM=/)\n\n"
        "üéØ **Jira Board:**\n"
        "[Open Jira](https://danildc.atlassian.net/jira/software/projects/KAN/boards/1)"
    )
    await message.reply(links_text, parse_mode="Markdown", disable_web_page_preview=True)

# –ö–æ–º–∞–Ω–¥–∞ /add_event ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
class AddEventStates(StatesGroup):
    waiting_for_datetime = State()
    waiting_for_title = State()
    waiting_for_link = State()

def _is_valid_url(url: str) -> bool:
    try:
        parsed = urlparse(url)
        return parsed.scheme in ("http", "https") and bool(parsed.netloc)
    except Exception:
        return False

@dp.message_handler(commands=["add_event"])
async def add_event(message: types.Message, state: FSMContext):
    """–ú–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: –¥–∞—Ç–∞/–≤—Ä–µ–º—è -> –Ω–∞–∑–≤–∞–Ω–∏–µ -> —Å—Å—ã–ª–∫–∞"""
    # –°—Ç–∞—Ä—Ç: –ø—Ä–æ—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –î–∞–Ω–∞–Ω–≥–µ
    prompt = (
        "üìÖ **Create Event**\n\n"
        "Send date and time in Danang timezone (GMT+7) in format:\n"
        "`YYYY-MM-DD HH:MM`\n\n"
        "Example: `2025-10-19 21:30`"
    )
    sent = await message.reply(prompt, parse_mode="Markdown")
    await state.update_data(_msg_ids=[sent.message_id, message.message_id])
    await AddEventStates.waiting_for_datetime.set()

@dp.message_handler(state=AddEventStates.waiting_for_datetime, content_types=types.ContentTypes.TEXT)
async def add_event_datetime_step(message: types.Message, state: FSMContext):
    text = message.text.strip()
    try:
        naive_dt = datetime.strptime(text, "%Y-%m-%d %H:%M")
        event_dt = DANANG_TZ.localize(naive_dt)
        if event_dt <= datetime.now(DANANG_TZ):
            raise ValueError("past")
        data = await state.get_data()
        msg_ids = data.get("_msg_ids", []) + [message.message_id]
        await state.update_data(event_dt=event_dt.isoformat(), _msg_ids=msg_ids)
        sent = await message.reply("üìù Now send the event title", parse_mode="Markdown")
        await state.update_data(_msg_ids=msg_ids + [sent.message_id])
        await AddEventStates.waiting_for_title.set()
    except Exception:
        err = await message.reply("‚ùå Invalid datetime. Use `YYYY-MM-DD HH:MM` in Danang time.", parse_mode="Markdown")
        data = await state.get_data()
        await state.update_data(_msg_ids=(data.get("_msg_ids", []) + [message.message_id, err.message_id]))

@dp.message_handler(state=AddEventStates.waiting_for_title, content_types=types.ContentTypes.TEXT)
async def add_event_title_step(message: types.Message, state: FSMContext):
    title = message.text.strip()
    if not title:
        err = await message.reply("‚ùå Title cannot be empty. Send the title.")
        data = await state.get_data()
        await state.update_data(_msg_ids=(data.get("_msg_ids", []) + [message.message_id, err.message_id]))
        return
    data = await state.get_data()
    msg_ids = data.get("_msg_ids", []) + [message.message_id]
    await state.update_data(title=title, _msg_ids=msg_ids)
    sent = await message.reply("üîó Send the meeting link (http/https)")
    await state.update_data(_msg_ids=msg_ids + [sent.message_id])
    await AddEventStates.waiting_for_link.set()

@dp.message_handler(state=AddEventStates.waiting_for_link, content_types=types.ContentTypes.TEXT)
async def add_event_link_step(message: types.Message, state: FSMContext):
    link = message.text.strip()
    if not _is_valid_url(link):
        err = await message.reply("‚ùå Invalid URL. Send a valid http/https link.")
        data = await state.get_data()
        await state.update_data(_msg_ids=(data.get("_msg_ids", []) + [message.message_id, err.message_id]))
        return
    data = await state.get_data()
    msg_ids = data.get("_msg_ids", []) + [message.message_id]
    event_dt_iso = data.get("event_dt")
    title = data.get("title")
    event_dt = datetime.fromisoformat(event_dt_iso)
    event_id = f"{message.chat.id}_{int(event_dt.timestamp())}"
    event = Event(
        id=event_id,
        title=title,
        datetime_str=event_dt.isoformat(),
        chat_id=message.chat.id,
        link=link
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    events[event_id] = event
    await save_events(events)
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    await schedule_reminder(event)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        for mid in set(msg_ids):
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=mid)
            except Exception:
                pass
    finally:
        pass

    # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-—Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ
    final_text = (
        "‚úÖ **Event Created!**\n\n"
        f"**Title:** {title}\n"
        f"**Date & Time (Danang):** {event_dt.astimezone(DANANG_TZ).strftime('%H:%M, %d %b %Y')}\n"
        f"üîó [Join meeting]({link})\n"
        "‚è∞ Reminder will be sent 10 minutes before."
    )
    await message.reply(final_text, parse_mode="Markdown", disable_web_page_preview=True)
    await state.finish()

# –ö–æ–º–∞–Ω–¥–∞ /list_events ‚Äî —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
@dp.message_handler(commands=["list_events"])
async def list_events(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_events = [event for event in events.values() if event.chat_id == message.chat.id]
    
    if not user_events:
        await message.reply("üìÖ **No events scheduled**\n\nUse `/add_event` to create one!", parse_mode="Markdown")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    user_events.sort(key=lambda x: x.datetime)
    
    events_text = "üìÖ **Your Events:**\n\n"
    for i, event in enumerate(user_events, 1):
        events_text += f"**{i}.** {event.title}\n"
        events_text += f"   üìÖ {event.datetime.strftime('%H:%M, %d %b %Y')}\n"
        # –û–ø–∏—Å–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ; –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∞
        events_text += f"   üîó {('link attached' if event.link else 'no link')}\n"
        events_text += f"   üÜî `{event.id}`\n\n"
    
    events_text += "Use `/delete_event <ID>` to remove an event"
    
    await message.reply(events_text, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /delete_event ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
@dp.message_handler(commands=["delete_event"])
async def delete_event(message: types.Message):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø–æ ID"""
    event_id = message.get_args().strip()
    
    if not event_id:
        await message.reply("‚ùå Please provide event ID\n\nUse `/list_events` to see your events", parse_mode="Markdown")
        return
    
    if event_id in events and events[event_id].chat_id == message.chat.id:
        # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        try:
            scheduler.remove_job(f"reminder_{event_id}")
        except Exception:
            pass
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        event_title = events[event_id].title
        del events[event_id]
        await save_events(events)
        
        await message.reply(f"‚úÖ **Event deleted:** {event_title}", parse_mode="Markdown")
    else:
        await message.reply("‚ùå Event not found or you don't have permission to delete it", parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º
@dp.message_handler(commands=["help"])
async def help_command(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = (
        "ü§ñ **Bot Commands:**\n\n"
        "üïí `/time` - Current time in Danang\n"
        "üîó `/links` - Useful links (Miro, Jira)\n\n"
        "üìÖ **Event Management:**\n"
        "‚ûï `/add_event` - Create new event (step-by-step)\n"
        "üìã `/list_events` - List your events\n"
        "üóëÔ∏è `/delete_event <ID>` - Delete event\n\n"
        "Creation flow: send datetime (Danang) -> title -> meeting link.\n\n"
        "‚è∞ Reminders are sent 10 minutes before each event with the link!"
    )
    await message.reply(help_text, parse_mode="Markdown")

app = FastAPI()

@app.on_event("startup")
async def on_startup():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    global events
    events = await load_events()
    print(f"Loaded {len(events)} events from storage")
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    for event in events.values():
        await schedule_reminder(event)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()
    print("Scheduler started")
    
    # –ü—É—Ç—å –≤–µ–±—Ö—É–∫–∞ —Å —Å–µ–∫—Ä–µ—Ç–æ–º
    webhook_path = f"/webhook/{WEBHOOK_SECRET}"
    if not BASE_URL:
        # –ù–∞ –ø–µ—Ä–≤–æ–º —Å—Ç–∞—Ä—Ç–µ Render –º–æ–∂–µ—Ç –Ω–µ –ø—Ä–æ–∫–∏–Ω—É—Ç—å env
        print("WARNING: RENDER_EXTERNAL_URL is empty; webhook won't be set automatically.")
        return
    url = BASE_URL.rstrip("/") + webhook_path
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–∏—Å—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —è–≤–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–∏–ø—ã
    await bot.set_webhook(url, drop_pending_updates=True, allowed_updates=["message", "callback_query"])
    info = await bot.get_webhook_info()
    print(f"Webhook set to {url}")
    try:
        print(f"Webhook info: pending={info.pending_update_count}, last_error={getattr(info, 'last_error_message', None)}")
    except Exception:
        pass

@app.on_event("shutdown")
async def on_shutdown():
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.shutdown()
    print("Scheduler stopped")
    
    await bot.delete_webhook()
    # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º HTTP-—Å–µ—Å—Å–∏—é aiogram
    await bot.session.close()

@app.get("/")
async def health():
    return {"ok": True}

@app.post("/webhook/{secret}")
async def telegram_update(secret: str, request: Request):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —á—É–∂–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    if secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="forbidden")

    data = await request.json()
    # –ü—Ä–æ—Å—Ç–æ–π –ª–æ–≥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    try:
        print("Incoming update keys:", list(data.keys()))
    except Exception:
        pass
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞–ø–¥–µ–π—Ç–∞ –¥–ª—è aiogram v2
    update = types.Update(**data)

    # –í–ê–ñ–ù–û: –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ aiogram v2
    Bot.set_current(bot)
    Dispatcher.set_current(dp)

    try:
        await dp.process_update(update)
    except Exception as e:
        print("Error processing update:", repr(e))
    return {"ok": True}