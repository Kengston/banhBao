import os
import json
import aiofiles
from fastapi import FastAPI, Request, HTTPException
from aiogram import Bot, Dispatcher, types
from datetime import datetime, timedelta
import pytz
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from typing import Dict, List, Optional

BOT_TOKEN = os.getenv("BOT_TOKEN")  # –∑–∞–¥–∞–¥–∏—Ç–µ –≤ Render
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "change-me")  # –ª—é–±–æ–π —Å–µ–∫—Ä–µ—Ç
BASE_URL = os.getenv("RENDER_EXTERNAL_URL")  # Render –∑–∞–¥–∞—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
scheduler = AsyncIOScheduler()

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
EVENTS_FILE = "events.json"

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–±—ã—Ç–∏—è
class Event:
    def __init__(self, id: str, title: str, datetime_str: str, user_id: int, description: str = ""):
        self.id = id
        self.title = title
        self.datetime_str = datetime_str
        self.user_id = user_id
        self.description = description
        self.datetime = datetime.fromisoformat(datetime_str)
    
    def to_dict(self):
        return {
            "id": self.id,
            "title": self.title,
            "datetime_str": self.datetime_str,
            "user_id": self.user_id,
            "description": self.description
        }
    
    @classmethod
    def from_dict(cls, data: dict):
        return cls(
            id=data["id"],
            title=data["title"],
            datetime_str=data["datetime_str"],
            user_id=data["user_id"],
            description=data.get("description", "")
        )

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
async def load_events() -> Dict[str, Event]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        async with aiofiles.open(EVENTS_FILE, 'r', encoding='utf-8') as f:
            data = json.loads(await f.read())
            return {event_id: Event.from_dict(event_data) for event_id, event_data in data.items()}
    except FileNotFoundError:
        return {}
    except Exception as e:
        print(f"Error loading events: {e}")
        return {}

async def save_events(events: Dict[str, Event]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–∞–π–ª"""
    try:
        data = {event_id: event.to_dict() for event_id, event in events.items()}
        async with aiofiles.open(EVENTS_FILE, 'w', encoding='utf-8') as f:
            await f.write(json.dumps(data, ensure_ascii=False, indent=2))
    except Exception as e:
        print(f"Error saving events: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–±—ã—Ç–∏–π
events: Dict[str, Event] = {}

async def send_reminder(event: Event):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏"""
    try:
        reminder_text = (
            f"‚è∞ **Reminder!**\n\n"
            f"**Event:** {event.title}\n"
            f"**Time:** {event.datetime.strftime('%H:%M, %d %b %Y')}\n"
            f"**In:** 10 minutes\n"
        )
        if event.description:
            reminder_text += f"**Description:** {event.description}\n"
        
        await bot.send_message(event.user_id, reminder_text, parse_mode="Markdown")
        print(f"Reminder sent for event: {event.title}")
    except Exception as e:
        print(f"Error sending reminder: {e}")

async def schedule_reminder(event: Event):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ —Å–æ–±—ã—Ç–∏—è"""
    reminder_time = event.datetime - timedelta(minutes=10)
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –≤ –±—É–¥—É—â–µ–º
    if reminder_time > datetime.now(pytz.timezone("Asia/Ho_Chi_Minh")):
        scheduler.add_job(
            send_reminder,
            trigger=DateTrigger(run_date=reminder_time),
            args=[event],
            id=f"reminder_{event.id}",
            replace_existing=True
        )
        print(f"Scheduled reminder for event {event.title} at {reminder_time}")

# –ö–æ–º–∞–Ω–¥–∞ /time ‚Äî —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –≤ –î–∞–Ω–∞–Ω–≥–µ
@dp.message_handler(commands=["time"])
async def send_time(message: types.Message):
    tz = pytz.timezone("Asia/Ho_Chi_Minh")
    now = datetime.now(tz)
    # –ü—Ä–∏–º–µ—Ä: 14:03:27, 19 Oct 2025 (GMT+7)
    offset_hours = int(now.utcoffset().total_seconds() // 3600)
    formatted = now.strftime("%H:%M:%S, %d %b %Y")
    # –î–µ–ª–∞–µ–º –≤—Ä–µ–º—è –∂–∏—Ä–Ω—ã–º –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
    await message.reply(f"üïí Current time in Danang: *{formatted}* (GMT{offset_hours:+d})", parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /links ‚Äî —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–∞–±–æ—á–∏–µ –¥–æ—Å–∫–∏
@dp.message_handler(commands=["links"])
async def send_links(message: types.Message):
    links_text = (
        "üîó **Useful Links:**\n\n"
        "üìã **Miro Board:**\n"
        "[Open Miro](https://miro.com/app/board/uXjVJ7CoXxM=/)\n\n"
        "üéØ **Jira Board:**\n"
        "[Open Jira](https://danildc.atlassian.net/jira/software/projects/KAN/boards/1)"
    )
    await message.reply(links_text, parse_mode="Markdown", disable_web_page_preview=True)

# –ö–æ–º–∞–Ω–¥–∞ /add_event ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
@dp.message_handler(commands=["add_event"])
async def add_event(message: types.Message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    args = message.get_args().strip()
    
    if not args:
        help_text = (
            "üìÖ **Add Event**\n\n"
            "Usage: `/add_event Title | YYYY-MM-DD HH:MM | Description`\n\n"
            "**Example:**\n"
            "`/add_event Team Meeting | 2024-01-15 14:30 | Discuss project progress`\n\n"
            "**Note:** Time is in Danang timezone (GMT+7)"
        )
        await message.reply(help_text, parse_mode="Markdown")
        return
    
    try:
        parts = args.split('|')
        if len(parts) < 2:
            raise ValueError("Invalid format")
        
        title = parts[0].strip()
        datetime_str = parts[1].strip()
        description = parts[2].strip() if len(parts) > 2 else ""
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        event_datetime = datetime.strptime(datetime_str, "%Y-%m-%d %H:%M")
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –î–∞–Ω–∞–Ω–≥–∞
        tz = pytz.timezone("Asia/Ho_Chi_Minh")
        event_datetime = tz.localize(event_datetime)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –≤ –±—É–¥—É—â–µ–º
        if event_datetime <= datetime.now(tz):
            await message.reply("‚ùå Event must be in the future!", parse_mode="Markdown")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        event_id = f"{message.from_user.id}_{int(event_datetime.timestamp())}"
        event = Event(
            id=event_id,
            title=title,
            datetime_str=event_datetime.isoformat(),
            user_id=message.from_user.id,
            description=description
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        events[event_id] = event
        await save_events(events)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        await schedule_reminder(event)
        
        success_text = (
            f"‚úÖ **Event Added!**\n\n"
            f"**Title:** {title}\n"
            f"**Date & Time:** {event_datetime.strftime('%H:%M, %d %b %Y')}\n"
            f"**Reminder:** 10 minutes before\n"
        )
        if description:
            success_text += f"**Description:** {description}\n"
        
        await message.reply(success_text, parse_mode="Markdown")
        
    except ValueError as e:
        error_text = (
            "‚ùå **Invalid Format**\n\n"
            "Please use: `/add_event Title | YYYY-MM-DD HH:MM | Description`\n\n"
            "**Example:**\n"
            "`/add_event Team Meeting | 2024-01-15 14:30 | Discuss project progress`"
        )
        await message.reply(error_text, parse_mode="Markdown")
    except Exception as e:
        await message.reply(f"‚ùå Error adding event: {str(e)}", parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /list_events ‚Äî —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
@dp.message_handler(commands=["list_events"])
async def list_events(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_events = [event for event in events.values() if event.user_id == message.from_user.id]
    
    if not user_events:
        await message.reply("üìÖ **No events scheduled**\n\nUse `/add_event` to create one!", parse_mode="Markdown")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    user_events.sort(key=lambda x: x.datetime)
    
    events_text = "üìÖ **Your Events:**\n\n"
    for i, event in enumerate(user_events, 1):
        events_text += f"**{i}.** {event.title}\n"
        events_text += f"   üìÖ {event.datetime.strftime('%H:%M, %d %b %Y')}\n"
        if event.description:
            events_text += f"   üìù {event.description}\n"
        events_text += f"   üÜî `{event.id}`\n\n"
    
    events_text += "Use `/delete_event <ID>` to remove an event"
    
    await message.reply(events_text, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /delete_event ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
@dp.message_handler(commands=["delete_event"])
async def delete_event(message: types.Message):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø–æ ID"""
    event_id = message.get_args().strip()
    
    if not event_id:
        await message.reply("‚ùå Please provide event ID\n\nUse `/list_events` to see your events", parse_mode="Markdown")
        return
    
    if event_id in events and events[event_id].user_id == message.from_user.id:
        # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        try:
            scheduler.remove_job(f"reminder_{event_id}")
        except:
            pass
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        event_title = events[event_id].title
        del events[event_id]
        await save_events(events)
        
        await message.reply(f"‚úÖ **Event deleted:** {event_title}", parse_mode="Markdown")
    else:
        await message.reply("‚ùå Event not found or you don't have permission to delete it", parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º
@dp.message_handler(commands=["help"])
async def help_command(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = (
        "ü§ñ **Bot Commands:**\n\n"
        "üïí `/time` - Current time in Danang\n"
        "üîó `/links` - Useful links (Miro, Jira)\n\n"
        "üìÖ **Event Management:**\n"
        "‚ûï `/add_event` - Add new event\n"
        "üìã `/list_events` - List your events\n"
        "üóëÔ∏è `/delete_event <ID>` - Delete event\n\n"
        "**Event Format:**\n"
        "`/add_event Title | YYYY-MM-DD HH:MM | Description`\n\n"
        "**Example:**\n"
        "`/add_event Team Meeting | 2024-01-15 14:30 | Discuss project progress`\n\n"
        "‚è∞ Reminders are sent 10 minutes before each event!"
    )
    await message.reply(help_text, parse_mode="Markdown")

app = FastAPI()

@app.on_event("startup")
async def on_startup():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    global events
    events = await load_events()
    print(f"Loaded {len(events)} events from storage")
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    for event in events.values():
        await schedule_reminder(event)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()
    print("Scheduler started")
    
    # –ü—É—Ç—å –≤–µ–±—Ö—É–∫–∞ —Å —Å–µ–∫—Ä–µ—Ç–æ–º
    webhook_path = f"/webhook/{WEBHOOK_SECRET}"
    if not BASE_URL:
        # –ù–∞ –ø–µ—Ä–≤–æ–º —Å—Ç–∞—Ä—Ç–µ Render –º–æ–∂–µ—Ç –Ω–µ –ø—Ä–æ–∫–∏–Ω—É—Ç—å env
        print("WARNING: RENDER_EXTERNAL_URL is empty; webhook won't be set automatically.")
        return
    url = BASE_URL.rstrip("/") + webhook_path
    await bot.set_webhook(url)
    print(f"Webhook set to {url}")

@app.on_event("shutdown")
async def on_shutdown():
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.shutdown()
    print("Scheduler stopped")
    
    await bot.delete_webhook()
    # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º HTTP-—Å–µ—Å—Å–∏—é aiogram
    await bot.session.close()

@app.get("/")
async def health():
    return {"ok": True}

@app.post(f"/webhook/{{secret}}")
async def telegram_update(secret: str, request: Request):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —á—É–∂–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    if secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="forbidden")

    data = await request.json()
    update = types.Update(**data)

    # –í–ê–ñ–ù–û: –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ aiogram v2
    Bot.set_current(bot)
    Dispatcher.set_current(dp)

    await dp.process_update(update)
    return {"ok": True}